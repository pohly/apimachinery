/*
Copyright The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/dba/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MongoDBModificationRequestLister helps list MongoDBModificationRequests.
type MongoDBModificationRequestLister interface {
	// List lists all MongoDBModificationRequests in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MongoDBModificationRequest, err error)
	// MongoDBModificationRequests returns an object that can list and get MongoDBModificationRequests.
	MongoDBModificationRequests(namespace string) MongoDBModificationRequestNamespaceLister
	MongoDBModificationRequestListerExpansion
}

// mongoDBModificationRequestLister implements the MongoDBModificationRequestLister interface.
type mongoDBModificationRequestLister struct {
	indexer cache.Indexer
}

// NewMongoDBModificationRequestLister returns a new MongoDBModificationRequestLister.
func NewMongoDBModificationRequestLister(indexer cache.Indexer) MongoDBModificationRequestLister {
	return &mongoDBModificationRequestLister{indexer: indexer}
}

// List lists all MongoDBModificationRequests in the indexer.
func (s *mongoDBModificationRequestLister) List(selector labels.Selector) (ret []*v1alpha1.MongoDBModificationRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MongoDBModificationRequest))
	})
	return ret, err
}

// MongoDBModificationRequests returns an object that can list and get MongoDBModificationRequests.
func (s *mongoDBModificationRequestLister) MongoDBModificationRequests(namespace string) MongoDBModificationRequestNamespaceLister {
	return mongoDBModificationRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MongoDBModificationRequestNamespaceLister helps list and get MongoDBModificationRequests.
type MongoDBModificationRequestNamespaceLister interface {
	// List lists all MongoDBModificationRequests in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MongoDBModificationRequest, err error)
	// Get retrieves the MongoDBModificationRequest from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MongoDBModificationRequest, error)
	MongoDBModificationRequestNamespaceListerExpansion
}

// mongoDBModificationRequestNamespaceLister implements the MongoDBModificationRequestNamespaceLister
// interface.
type mongoDBModificationRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MongoDBModificationRequests in the indexer for a given namespace.
func (s mongoDBModificationRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MongoDBModificationRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MongoDBModificationRequest))
	})
	return ret, err
}

// Get retrieves the MongoDBModificationRequest from the indexer for a given namespace and name.
func (s mongoDBModificationRequestNamespaceLister) Get(name string) (*v1alpha1.MongoDBModificationRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mongodbmodificationrequest"), name)
	}
	return obj.(*v1alpha1.MongoDBModificationRequest), nil
}
