/*
Copyright The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubedb.dev/apimachinery/apis/dba/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticsearchModificationRequestLister helps list ElasticsearchModificationRequests.
type ElasticsearchModificationRequestLister interface {
	// List lists all ElasticsearchModificationRequests in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchModificationRequest, err error)
	// ElasticsearchModificationRequests returns an object that can list and get ElasticsearchModificationRequests.
	ElasticsearchModificationRequests(namespace string) ElasticsearchModificationRequestNamespaceLister
	ElasticsearchModificationRequestListerExpansion
}

// elasticsearchModificationRequestLister implements the ElasticsearchModificationRequestLister interface.
type elasticsearchModificationRequestLister struct {
	indexer cache.Indexer
}

// NewElasticsearchModificationRequestLister returns a new ElasticsearchModificationRequestLister.
func NewElasticsearchModificationRequestLister(indexer cache.Indexer) ElasticsearchModificationRequestLister {
	return &elasticsearchModificationRequestLister{indexer: indexer}
}

// List lists all ElasticsearchModificationRequests in the indexer.
func (s *elasticsearchModificationRequestLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchModificationRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticsearchModificationRequest))
	})
	return ret, err
}

// ElasticsearchModificationRequests returns an object that can list and get ElasticsearchModificationRequests.
func (s *elasticsearchModificationRequestLister) ElasticsearchModificationRequests(namespace string) ElasticsearchModificationRequestNamespaceLister {
	return elasticsearchModificationRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticsearchModificationRequestNamespaceLister helps list and get ElasticsearchModificationRequests.
type ElasticsearchModificationRequestNamespaceLister interface {
	// List lists all ElasticsearchModificationRequests in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchModificationRequest, err error)
	// Get retrieves the ElasticsearchModificationRequest from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ElasticsearchModificationRequest, error)
	ElasticsearchModificationRequestNamespaceListerExpansion
}

// elasticsearchModificationRequestNamespaceLister implements the ElasticsearchModificationRequestNamespaceLister
// interface.
type elasticsearchModificationRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticsearchModificationRequests in the indexer for a given namespace.
func (s elasticsearchModificationRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchModificationRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticsearchModificationRequest))
	})
	return ret, err
}

// Get retrieves the ElasticsearchModificationRequest from the indexer for a given namespace and name.
func (s elasticsearchModificationRequestNamespaceLister) Get(name string) (*v1alpha1.ElasticsearchModificationRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticsearchmodificationrequest"), name)
	}
	return obj.(*v1alpha1.ElasticsearchModificationRequest), nil
}
